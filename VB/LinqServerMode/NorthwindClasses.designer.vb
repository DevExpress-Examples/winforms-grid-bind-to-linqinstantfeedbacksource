'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Data
Imports System.Collections.Generic
Imports System.Reflection
Imports System.Linq
Imports System.Linq.Expressions
Imports System.ComponentModel
Imports System

Namespace LinqServerMode

    <Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Northwind")>
    Public Partial Class NorthwindClassesDataContext
        Inherits System.Data.Linq.DataContext

        Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New System.Data.Linq.Mapping.AttributeMappingSource()

'#Region "Extensibility Method Definitions"
        Partial Private Sub OnCreated()
        End Sub

        Partial Private Sub InsertSupplier(ByVal instance As LinqServerMode.Supplier)
        End Sub

        Partial Private Sub UpdateSupplier(ByVal instance As LinqServerMode.Supplier)
        End Sub

        Partial Private Sub DeleteSupplier(ByVal instance As LinqServerMode.Supplier)
        End Sub

'#End Region
        Public Sub New()
            MyBase.New(Global.LinqServerMode.Properties.Settings.[Default].NorthwindConnectionString, LinqServerMode.NorthwindClassesDataContext.mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As String)
            MyBase.New(connection, LinqServerMode.NorthwindClassesDataContext.mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection)
            MyBase.New(connection, LinqServerMode.NorthwindClassesDataContext.mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            Me.OnCreated()
        End Sub

        Public ReadOnly Property Suppliers As System.Data.Linq.Table(Of LinqServerMode.Supplier)
            Get
                Return Me.GetTable(Of LinqServerMode.Supplier)()
            End Get
        End Property
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Suppliers")>
    Public Partial Class Supplier
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As System.ComponentModel.PropertyChangingEventArgs = New System.ComponentModel.PropertyChangingEventArgs(System.[String].Empty)

        Private _SupplierID As Integer

        Private _CompanyName As String

        Private _ContactName As String

        Private _ContactTitle As String

        Private _Address As String

        Private _City As String

        Private _Region As String

        Private _PostalCode As String

        Private _Country As String

        Private _Phone As String

        Private _Fax As String

        Private _HomePage As String

'#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub

        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub

        Partial Private Sub OnCreated()
        End Sub

        Partial Private Sub OnSupplierIDChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnSupplierIDChanged()
        End Sub

        Partial Private Sub OnCompanyNameChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnCompanyNameChanged()
        End Sub

        Partial Private Sub OnContactNameChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnContactNameChanged()
        End Sub

        Partial Private Sub OnContactTitleChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnContactTitleChanged()
        End Sub

        Partial Private Sub OnAddressChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnAddressChanged()
        End Sub

        Partial Private Sub OnCityChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnCityChanged()
        End Sub

        Partial Private Sub OnRegionChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnRegionChanged()
        End Sub

        Partial Private Sub OnPostalCodeChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnPostalCodeChanged()
        End Sub

        Partial Private Sub OnCountryChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnCountryChanged()
        End Sub

        Partial Private Sub OnPhoneChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnPhoneChanged()
        End Sub

        Partial Private Sub OnFaxChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnFaxChanged()
        End Sub

        Partial Private Sub OnHomePageChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnHomePageChanged()
        End Sub

'#End Region
        Public Sub New()
            Me.OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierID", AutoSync:=System.Data.Linq.Mapping.AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property SupplierID As Integer
            Get
                Return Me._SupplierID
            End Get

            Set(ByVal value As Integer)
                If(Me._SupplierID <> value) Then
                    Me.OnSupplierIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._SupplierID = value
                    Me.SendPropertyChanged("SupplierID")
                    Me.OnSupplierIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)>
        Public Property CompanyName As String
            Get
                Return Me._CompanyName
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._CompanyName, value)) Then
                    Me.OnCompanyNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._CompanyName = value
                    Me.SendPropertyChanged("CompanyName")
                    Me.OnCompanyNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactName", DbType:="NVarChar(30)")>
        Public Property ContactName As String
            Get
                Return Me._ContactName
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._ContactName, value)) Then
                    Me.OnContactNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._ContactName = value
                    Me.SendPropertyChanged("ContactName")
                    Me.OnContactNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactTitle", DbType:="NVarChar(30)")>
        Public Property ContactTitle As String
            Get
                Return Me._ContactTitle
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._ContactTitle, value)) Then
                    Me.OnContactTitleChanging(value)
                    Me.SendPropertyChanging()
                    Me._ContactTitle = value
                    Me.SendPropertyChanged("ContactTitle")
                    Me.OnContactTitleChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(60)")>
        Public Property Address As String
            Get
                Return Me._Address
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Address, value)) Then
                    Me.OnAddressChanging(value)
                    Me.SendPropertyChanging()
                    Me._Address = value
                    Me.SendPropertyChanged("Address")
                    Me.OnAddressChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(15)")>
        Public Property City As String
            Get
                Return Me._City
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._City, value)) Then
                    Me.OnCityChanging(value)
                    Me.SendPropertyChanging()
                    Me._City = value
                    Me.SendPropertyChanged("City")
                    Me.OnCityChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Region", DbType:="NVarChar(15)")>
        Public Property Region As String
            Get
                Return Me._Region
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Region, value)) Then
                    Me.OnRegionChanging(value)
                    Me.SendPropertyChanging()
                    Me._Region = value
                    Me.SendPropertyChanged("Region")
                    Me.OnRegionChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="NVarChar(10)")>
        Public Property PostalCode As String
            Get
                Return Me._PostalCode
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._PostalCode, value)) Then
                    Me.OnPostalCodeChanging(value)
                    Me.SendPropertyChanging()
                    Me._PostalCode = value
                    Me.SendPropertyChanged("PostalCode")
                    Me.OnPostalCodeChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(15)")>
        Public Property Country As String
            Get
                Return Me._Country
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Country, value)) Then
                    Me.OnCountryChanging(value)
                    Me.SendPropertyChanging()
                    Me._Country = value
                    Me.SendPropertyChanged("Country")
                    Me.OnCountryChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(24)")>
        Public Property Phone As String
            Get
                Return Me._Phone
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Phone, value)) Then
                    Me.OnPhoneChanging(value)
                    Me.SendPropertyChanging()
                    Me._Phone = value
                    Me.SendPropertyChanged("Phone")
                    Me.OnPhoneChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax", DbType:="NVarChar(24)")>
        Public Property Fax As String
            Get
                Return Me._Fax
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Fax, value)) Then
                    Me.OnFaxChanging(value)
                    Me.SendPropertyChanging()
                    Me._Fax = value
                    Me.SendPropertyChanged("Fax")
                    Me.OnFaxChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HomePage", DbType:="NText", UpdateCheck:=System.Data.Linq.Mapping.UpdateCheck.Never)>
        Public Property HomePage As String
            Get
                Return Me._HomePage
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._HomePage, value)) Then
                    Me.OnHomePageChanging(value)
                    Me.SendPropertyChanging()
                    Me._HomePage = value
                    Me.SendPropertyChanged("HomePage")
                    Me.OnHomePageChanged()
                End If
            End Set
        End Property

        Public Event PropertyChanging As System.ComponentModel.PropertyChangingEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, LinqServerMode.Supplier.emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As System.[String])
            RaiseEvent PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End Sub
    End Class
End Namespace
